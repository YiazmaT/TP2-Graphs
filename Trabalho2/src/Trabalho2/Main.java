/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Trabalho2;

import Buscas.BuscaLargura;
import Buscas.BuscaProfundidade;
import CaminhoMinimo.Dijkstra;
import ColorScale.RainbowScale;
import DesenharGrafo.Edge;
import DesenharGrafo.Graph;
import DesenharGrafo.Vertex;
import grafos.Aresta;
import grafos.Grafo;
import grafos.ListaAdjacencia;
import grafos.Utilitarios;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Stack;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import ÁrvoreGeradoraMinima.AgmKruskal;

/**
 *
 * @author Eymar Lima
 */
public class Main extends javax.swing.JFrame {
    
    private static Graph desenho;
    private int isDigraph = 0;
    private ListaAdjacencia lista;
    public  ViewPanel view;
    private BufferedImage imageBuffer;
    private String diretorio;
    /**
     * Creates new form Main
     */
  
    public Main() {
        view = new ViewPanel();
        
        this.setVisible(true);
        initComponents();
        this.diretorio = "n";
        this.setLocationRelativeTo(null);
        try{
            Image icon = Toolkit.getDefaultToolkit().getImage("src/gui/images/mainicon.png");
            setIconImage(icon);
        }catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, e, "ERRO", 0);
        }

        this.inicioMenu.setEnabled(false);
        this.desabilitarMenus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane(this.view);
        jMenuBar1 = new javax.swing.JMenuBar();
        inicioMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        loadFile = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        buscaEmLarguraMenu = new javax.swing.JMenuItem();
        componentesConexasMenu = new javax.swing.JMenuItem();
        arvoreGeradoraMinimaMenu = new javax.swing.JMenuItem();
        caminhoMinimoEntreVerticesMenu = new javax.swing.JMenuItem();
        coloracaoMenu = new javax.swing.JMenuItem();
        conectividadeMenu = new javax.swing.JMenuItem();
        transposicaoMenu = new javax.swing.JMenuItem();
        ordemTopologicaMenu = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        jMenu5.setText("File");
        jMenuBar2.add(jMenu5);

        jMenu6.setText("Edit");
        jMenuBar2.add(jMenu6);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trabalho Prático de Grafos II");
        setResizable(false);
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        inicioMenu.setText("Inicio");
        inicioMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inicioMenuMouseClicked(evt);
            }
        });
        inicioMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicioMenuActionPerformed(evt);
            }
        });
        jMenuBar1.add(inicioMenu);

        jMenu1.setText("Arquivo");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        loadFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/loadFile.png"))); // NOI18N
        loadFile.setText("Carregar");
        loadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileActionPerformed(evt);
            }
        });
        jMenu1.add(loadFile);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Funções");

        buscaEmLarguraMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search2.png"))); // NOI18N
        buscaEmLarguraMenu.setText("Busca em Largura");
        buscaEmLarguraMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaEmLarguraMenuActionPerformed(evt);
            }
        });
        jMenu2.add(buscaEmLarguraMenu);

        componentesConexasMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/connection.png"))); // NOI18N
        componentesConexasMenu.setText("Componentes Conexas");
        componentesConexasMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                componentesConexasMenuActionPerformed(evt);
            }
        });
        jMenu2.add(componentesConexasMenu);

        arvoreGeradoraMinimaMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/tree.png"))); // NOI18N
        arvoreGeradoraMinimaMenu.setText("Árvore Geradora Mínima");
        arvoreGeradoraMinimaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arvoreGeradoraMinimaMenuActionPerformed(evt);
            }
        });
        jMenu2.add(arvoreGeradoraMinimaMenu);

        caminhoMinimoEntreVerticesMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/line.png"))); // NOI18N
        caminhoMinimoEntreVerticesMenu.setText("Caminho Mínimo Entre Vértices");
        caminhoMinimoEntreVerticesMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caminhoMinimoEntreVerticesMenuActionPerformed(evt);
            }
        });
        jMenu2.add(caminhoMinimoEntreVerticesMenu);

        coloracaoMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/redColorWheel.png"))); // NOI18N
        coloracaoMenu.setText("Coloração");
        coloracaoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coloracaoMenuActionPerformed(evt);
            }
        });
        jMenu2.add(coloracaoMenu);

        conectividadeMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/conectivityRed.png"))); // NOI18N
        conectividadeMenu.setText("Conectividade");
        conectividadeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conectividadeMenuActionPerformed(evt);
            }
        });
        jMenu2.add(conectividadeMenu);

        transposicaoMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/double-arrowRed.png"))); // NOI18N
        transposicaoMenu.setText("Transposição");
        transposicaoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transposicaoMenuActionPerformed(evt);
            }
        });
        jMenu2.add(transposicaoMenu);

        ordemTopologicaMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/nextRed.png"))); // NOI18N
        ordemTopologicaMenu.setText("Ordem Topológica");
        ordemTopologicaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordemTopologicaMenuActionPerformed(evt);
            }
        });
        jMenu2.add(ordemTopologicaMenu);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Sobre");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
    }//GEN-LAST:event_formWindowOpened

    private void loadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileActionPerformed
        JFileChooser file = new JFileChooser();
        file.setDialogTitle("Escolha o arquivo do grafo");
        file.setFileFilter(new FileFilter(){

            @Override
            public boolean accept(File f) {
                return(f.getName().endsWith(".txt") || f.isDirectory());
            }
            
            @Override
            public String getDescription(){
                return "Arquivo de Texto (.txt)";
            }
        });
            
    int opcao = file.showOpenDialog(this);
    
    if(opcao == JFileChooser.APPROVE_OPTION){    
        this.diretorio = file.getSelectedFile().getAbsolutePath();
  
        lista = Utilitarios.leitura(this.diretorio);
        //desenho:
        this.desenho = leituraDesenho();
        this.print();
        if(desenho.getIsDigrafo() == true) isDigraph = 1;
        else isDigraph = 0;
        
        //menus;
        this.inicioMenu.setEnabled(true);
        if(isDigraph == 1) this.programarMenus(true);
        else this.programarMenus(false);     
    }
    
    }//GEN-LAST:event_loadFileActionPerformed

    private Graph leituraDesenho(){
       Graph grafoDesenho;
       grafoDesenho = new Graph(lista.getNumVertices(),lista.isOrientado(),true);
       PriorityQueue<Aresta> arestas = lista.getArestas();
       
       for(Aresta a : arestas){
            Vertex vS = grafoDesenho.getVertex().get(a.getNodeA());
            Vertex vT = grafoDesenho.getVertex().get(a.getNodeB());
            Edge e = new Edge(vS, vT, a.getValor(), lista.isOrientado());
                
            grafoDesenho.addEdge(e);
       }
       return grafoDesenho;
    }
    
    public void print(){
        this.view.setGraph(desenho);
    }
    
    public void buscaLargura(int raiz){
        Buscas.BuscaLargura busca = new BuscaLargura(lista);
        busca.buscaLargura(raiz);
        int[] pai;
        
        pai = busca.getPai();
        
        //teste
        desenho.descelecionarEdges();
        for(int i=0;i<pai.length;i++){
            desenho.setEdgeAsSelected(pai[i],i);
        }
        view.cleanImage();
        view.repaint();
    }
    
    private void buscaEmLarguraMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaEmLarguraMenuActionPerformed
        String temp = JOptionPane.showInputDialog("Introduza o vértice inicial:");
        int vInicial = Integer.parseInt(temp);
        this.buscaLargura(vInicial);
        
    }//GEN-LAST:event_buscaEmLarguraMenuActionPerformed

    private void inicioMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inicioMenuMouseClicked
        //lista = Utilitarios.leitura(this.diretorio);
        this.desenho = leituraDesenho();
        this.print();
    }//GEN-LAST:event_inicioMenuMouseClicked

    private void componentesConexasMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_componentesConexasMenuActionPerformed
        this.componentesConexas();
    }//GEN-LAST:event_componentesConexasMenuActionPerformed

    private void arvoreGeradoraMinimaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arvoreGeradoraMinimaMenuActionPerformed
        this.arvoreGeradoraMinima();
    }//GEN-LAST:event_arvoreGeradoraMinimaMenuActionPerformed

    private void caminhoMinimoEntreVerticesMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caminhoMinimoEntreVerticesMenuActionPerformed
        String temp = JOptionPane.showInputDialog("Introduza o vértice inicial:");
        int vInicial = Integer.parseInt(temp);
        this.caminhoMinimo(vInicial);
    }//GEN-LAST:event_caminhoMinimoEntreVerticesMenuActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        Sobre s = new Sobre(this, true);
        s.setVisible(true);
    }//GEN-LAST:event_jMenu3MouseClicked

    private void coloracaoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coloracaoMenuActionPerformed
        this.coloracao();
    }//GEN-LAST:event_coloracaoMenuActionPerformed

    private void conectividadeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conectividadeMenuActionPerformed
        this.conectividade();
    }//GEN-LAST:event_conectividadeMenuActionPerformed

    private void transposicaoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transposicaoMenuActionPerformed
        lista = lista.calcularTransposta();
        desenho = this.leituraDesenho();
        view.cleanImage();
        view.repaint();
    }//GEN-LAST:event_transposicaoMenuActionPerformed

    private void ordemTopologicaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordemTopologicaMenuActionPerformed
        String temp = JOptionPane.showInputDialog("Introduza o vértice inicial:");
        int vInicial = Integer.parseInt(temp);
        this.ordemTopologica(vInicial);
    }//GEN-LAST:event_ordemTopologicaMenuActionPerformed

    private void inicioMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicioMenuActionPerformed

    }//GEN-LAST:event_inicioMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    
    public void programarMenus(boolean isDigrafo){
        if(isDigrafo){
            buscaEmLarguraMenu.setEnabled(true);//ambos
            componentesConexasMenu.setEnabled(false);
            arvoreGeradoraMinimaMenu.setEnabled(false);
            caminhoMinimoEntreVerticesMenu.setEnabled(true);//ambos
            coloracaoMenu.setEnabled(false);
            conectividadeMenu.setEnabled(true);
            transposicaoMenu.setEnabled(true);
            ordemTopologicaMenu.setEnabled(true);
        }
        else{
            buscaEmLarguraMenu.setEnabled(true);//ambos
            componentesConexasMenu.setEnabled(true);
            arvoreGeradoraMinimaMenu.setEnabled(true);
            caminhoMinimoEntreVerticesMenu.setEnabled(true);//ambos
            coloracaoMenu.setEnabled(true);
            conectividadeMenu.setEnabled(false);
            transposicaoMenu.setEnabled(false);
            ordemTopologicaMenu.setEnabled(false);
        }
    }
    
    public void desabilitarMenus(){
            buscaEmLarguraMenu.setEnabled(false);//ambos
            componentesConexasMenu.setEnabled(false);
            arvoreGeradoraMinimaMenu.setEnabled(false);
            caminhoMinimoEntreVerticesMenu.setEnabled(false);//ambos
            coloracaoMenu.setEnabled(false);
            conectividadeMenu.setEnabled(false);
            transposicaoMenu.setEnabled(false);
            ordemTopologicaMenu.setEnabled(false);//ambos
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem arvoreGeradoraMinimaMenu;
    private javax.swing.JMenuItem buscaEmLarguraMenu;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JMenuItem caminhoMinimoEntreVerticesMenu;
    private javax.swing.JMenuItem coloracaoMenu;
    private javax.swing.JMenuItem componentesConexasMenu;
    private javax.swing.JMenuItem conectividadeMenu;
    private javax.swing.JMenu inicioMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem loadFile;
    private javax.swing.JMenuItem ordemTopologicaMenu;
    private javax.swing.JMenuItem transposicaoMenu;
    // End of variables declaration//GEN-END:variables
    
    public void ordemTopologica(int raiz){
        Stack<Integer> ordem;
        
        BuscaProfundidade busca = new BuscaProfundidade(lista);
        busca.buscaProfundidade(raiz);
        
        ordem = busca.getOrdemTopologica();
        
        criarDesenhoOrdem(ordem,lista);
        
        
    }
    
    public void coloracao(){
        Buscas.Coloracao color = new Buscas.Coloracao(lista);
        
        int cores[] = color.coloracao();
        int step = 255/(color.getNumCores());
        
        RainbowScale rs = new RainbowScale();
        for(int i=0;i<cores.length;i++){
            desenho.getVertex().get(i).setColor(rs.getColor(step*cores[i]));
        }
        
        view.cleanImage();
        view.repaint();
    }
    
    public void criarDesenhoOrdem(Stack<Integer> ordem, Grafo grafo){
        Graph novoDesenho = new Graph(grafo.getNumVertices(), true,false);
        float step = 75;
        Vertex origem, destino;
        PriorityQueue<Aresta> arestas = grafo.getArestas();
       
       int node;
        for(int i=ordem.size()-1;i>=0;i--){
           node = ordem.elementAt(i);
           origem = novoDesenho.getVertex().get(node);
           origem.setX(step);
           origem.setY(150);
           step+=75;
        }
        
        step = 1;  
        for(Aresta a : arestas){
            
            Vertex vS = novoDesenho.getVertex().get(a.getNodeA());
            Vertex vT = novoDesenho.getVertex().get(a.getNodeB());
            Edge e = new Edge(vS, vT, a.getValor(), grafo.isOrientado());
            
            int source = vS.getID();
            int target = vT.getID();
            int sourcePos = ordem.indexOf(vS.getID());
            int targetPos = ordem.indexOf(vT.getID());
            if( sourcePos != targetPos + 1){
                e.setArqueado((int)step);
                step*=-1;
            }
            novoDesenho.addEdge(e);
       }
        
        desenho = novoDesenho;
        view.setGraph(desenho);
        view.repaint();
    }
    
    public void componentesConexas(){
        int componentes[];

        
        BuscaProfundidade busca = new BuscaProfundidade(lista);
        busca.buscaProfundidade(0);
        componentes = busca.getComponentes();
        
        int compStep = 255 / busca.getNumComponentes();
        RainbowScale rbS = new RainbowScale();
        
        for(int i=0;i<componentes.length;i++){
            desenho.getVertex().get(i).setColor(rbS.getColor((componentes[i]-1) * compStep));
        }
        view.cleanImage();
        view.repaint();
    }
    
    public void caminhoMinimo(int raiz){
        int pai[];
        
       
        Dijkstra dijs = new Dijkstra(lista);
        dijs.caminhoMinimo(raiz);
        pai = dijs.getPai();
        
        desenho.descelecionarEdges();
        for(int i=0;i<pai.length;i++){
            desenho.setEdgeAsSelected(pai[i],i);
        }
        view.cleanImage();
        view.repaint();
    }
    
    public void arvoreGeradoraMinima(){
        Grafo resultado;
        
        
        AgmKruskal kruskal = new AgmKruskal(lista.getNumVertices(),lista);
        resultado = kruskal.AGM();
 
        PriorityQueue<Aresta> arestas = resultado.getArestas();
        
        desenho.descelecionarEdges();
        for(Aresta a : arestas){
            int nodeA,nodeB;
            nodeA = a.getNodeA();
            nodeB = a.getNodeB();
            
            desenho.setEdgeAsSelected(nodeA, nodeB);
        }
        view.cleanImage();
        view.repaint();
    }

    private void conectividade() {
        int componentes[];

        
        BuscaProfundidade busca = new BuscaProfundidade(lista);
        busca.conectividade();
        componentes = busca.getComponentes();
        
        int compStep = 255 / busca.getNumComponentes();
        RainbowScale rbS = new RainbowScale();
        
        for(int i=0;i<componentes.length;i++){
            desenho.getVertex().get(i).setColor(rbS.getColor((componentes[i]-1) * compStep));
        }
        view.cleanImage();
        view.repaint();
    }
    
    public class ViewPanel extends JPanel {

        public ViewPanel() {
            this.setBackground(java.awt.Color.WHITE);
            this.setLayout(new FlowLayout(FlowLayout.LEFT));
        }

        @Override
        public void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);

            java.awt.Graphics2D g2 = (java.awt.Graphics2D) g;
            ////configuração do rendering para obeter melhor qualidade
            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);

            if (desenho != null && this.imageBuffer == null) {
                this.imageBuffer = new BufferedImage(desenho.getSize().width + 1,
                        desenho.getSize().height + 1, BufferedImage.TYPE_INT_RGB);

                java.awt.Graphics2D g2Buffer = this.imageBuffer.createGraphics();
                g2Buffer.setColor(this.getBackground());
                g2Buffer.fillRect(0, 0, desenho.getSize().width + 1, desenho.getSize().height + 1);

                g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                desenho.draw(g2Buffer);
                g2Buffer.dispose();
            }

            if (this.imageBuffer != null) {
                g2.drawImage(this.imageBuffer, 0, 0, null);
            }
        }

        public void setGraph(Graph graph) {
            if (graph != null) {
                this.setPreferredSize(new Dimension(graph.getSize().width * 2,
                        graph.getSize().height * 2));
                this.setSize(new Dimension(graph.getSize().width * 2,
                        graph.getSize().height * 2));

                this.cleanImage();
                this.repaint();
            }
        }

        public Vertex getMarkedVertex() {
            return markedVertex;
        }

        public void cleanImage() {
            this.imageBuffer = null;
        }

        public void adjustPanel() {
            float iniX = desenho.getVertex().get(0).getX();
            float iniY = desenho.getVertex().get(0).getY();
            float max_x = iniX, max_y = iniX;
            float min_x = iniY, min_y = iniY;
            int zero = desenho.getVertex().get(0).getRay() * 5 + 10;

            for (int i = 1; i < desenho.getVertex().size(); i++) {
                float x = desenho.getVertex().get(i).getX();
                if (max_x < x) {
                    max_x = x;
                } else if (min_x > x) {
                    min_x = x;
                }

                float y = desenho.getVertex().get(i).getY();
                if (max_y < y) {
                    max_y = y;
                } else if (min_y > y) {
                    min_y = y;
                }
            }

            for (Vertex v : desenho.getVertex()) {
                v.setX(v.getX() + zero - min_x);
                v.setY(v.getY() + zero - min_y);
            }

            Dimension d = this.getSize();
            d.width = (int) max_x + zero;
            d.height = (int) max_y + zero;
            this.setSize(d);
            this.setPreferredSize(d);
        }

        public void markVertices(ArrayList<Vertex> vertices) {
            if (vertices != null) {
                this.cleanMarkedVertices(false);

                //change the vertices' colors
                for (Vertex v : vertices) {
                    v.setSelected(true);
                }

                this.cleanImage();
                this.repaint();
            }
        }

        public void cleanMarkedVertices(boolean cleanVertex) {
            if (desenho != null) {
                this.markedVertex = null;

                for (Vertex vertex : desenho.getVertex()) {
                    vertex.setSelected(false);

                }
            }

            this.cleanImage();
            this.repaint();
        }

        @Override
        public void setFont(java.awt.Font font) {
            //
        }

        @Override
        public java.awt.Font getFont() {
            return null;// colocar alguma fonte
        }

        @Override
        public void setBackground(Color bg) {
            super.setBackground(bg);

        }
        private java.awt.Color color = java.awt.Color.RED;
        //Used to color based on a document
        private Vertex markedVertex;
        //Used to move the points
        private Vertex selectedVertex;
        //contain the selected vertices which will be moved
        private ArrayList<Vertex> selectedVertices;
        //The image which will be drawn as a graph
        private BufferedImage imageBuffer;
    }
}


